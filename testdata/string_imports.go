// starting import: "strings"
package repl

import (
	"errors"
	"io"
	"runtime"
	"strings"
	"sync"
	"sync/atomic"
	"unicode"
	"unicode/utf8"
)

// EvalEnvironment adds to eval.Env those packages included
// with import "strings".

func EvalEnvironment() *eval.SimpleEnv {
	var consts map[string] reflect.Value
	var vars   map[string] reflect.Value
	var types  map[string] reflect.Type
	var funcs  map[string] reflect.Value
	var pkgs   map[string] eval.Env = make(map[string] eval.Env)

	consts = make(map[string] reflect.Value)

	funcs = make(map[string] reflect.Value)
	funcs["New"] = reflect.ValueOf(errors.New)

	types = make(map[string] reflect.Type)

	vars = make(map[string] reflect.Value)
	pkgs["errors"] = &eval.SimpleEnv {
		Consts: consts,
		Funcs:  funcs,
		Types:  types,
		Vars:   vars,
		Pkgs:   pkgs,
	}
	consts = make(map[string] reflect.Value)

	funcs = make(map[string] reflect.Value)
	funcs["WriteString"] = reflect.ValueOf(io.WriteString)
	funcs["ReadAtLeast"] = reflect.ValueOf(io.ReadAtLeast)
	funcs["ReadFull"] = reflect.ValueOf(io.ReadFull)
	funcs["CopyN"] = reflect.ValueOf(io.CopyN)
	funcs["Copy"] = reflect.ValueOf(io.Copy)
	funcs["LimitReader"] = reflect.ValueOf(io.LimitReader)
	funcs["NewSectionReader"] = reflect.ValueOf(io.NewSectionReader)
	funcs["TeeReader"] = reflect.ValueOf(io.TeeReader)
	funcs["MultiReader"] = reflect.ValueOf(io.MultiReader)
	funcs["MultiWriter"] = reflect.ValueOf(io.MultiWriter)
	funcs["Pipe"] = reflect.ValueOf(io.Pipe)

	types = make(map[string] reflect.Type)
	types["Reader"] = reflect.TypeOf(new(io.Reader)).Elem()
	types["Writer"] = reflect.TypeOf(new(io.Writer)).Elem()
	types["Closer"] = reflect.TypeOf(new(io.Closer)).Elem()
	types["Seeker"] = reflect.TypeOf(new(io.Seeker)).Elem()
	types["ReadWriter"] = reflect.TypeOf(new(io.ReadWriter)).Elem()
	types["ReadCloser"] = reflect.TypeOf(new(io.ReadCloser)).Elem()
	types["WriteCloser"] = reflect.TypeOf(new(io.WriteCloser)).Elem()
	types["ReadWriteCloser"] = reflect.TypeOf(new(io.ReadWriteCloser)).Elem()
	types["ReadSeeker"] = reflect.TypeOf(new(io.ReadSeeker)).Elem()
	types["WriteSeeker"] = reflect.TypeOf(new(io.WriteSeeker)).Elem()
	types["ReadWriteSeeker"] = reflect.TypeOf(new(io.ReadWriteSeeker)).Elem()
	types["ReaderFrom"] = reflect.TypeOf(new(io.ReaderFrom)).Elem()
	types["WriterTo"] = reflect.TypeOf(new(io.WriterTo)).Elem()
	types["ReaderAt"] = reflect.TypeOf(new(io.ReaderAt)).Elem()
	types["WriterAt"] = reflect.TypeOf(new(io.WriterAt)).Elem()
	types["ByteReader"] = reflect.TypeOf(new(io.ByteReader)).Elem()
	types["ByteScanner"] = reflect.TypeOf(new(io.ByteScanner)).Elem()
	types["ByteWriter"] = reflect.TypeOf(new(io.ByteWriter)).Elem()
	types["RuneReader"] = reflect.TypeOf(new(io.RuneReader)).Elem()
	types["RuneScanner"] = reflect.TypeOf(new(io.RuneScanner)).Elem()
	types["LimitedReader"] = reflect.TypeOf(new(io.LimitedReader)).Elem()
	types["SectionReader"] = reflect.TypeOf(new(io.SectionReader)).Elem()
	types["PipeReader"] = reflect.TypeOf(new(io.PipeReader)).Elem()
	types["PipeWriter"] = reflect.TypeOf(new(io.PipeWriter)).Elem()

	vars = make(map[string] reflect.Value)
	vars["ErrShortWrite"] = reflect.ValueOf(&io.ErrShortWrite)
	vars["ErrShortBuffer"] = reflect.ValueOf(&io.ErrShortBuffer)
	vars["EOF"] = reflect.ValueOf(&io.EOF)
	vars["ErrUnexpectedEOF"] = reflect.ValueOf(&io.ErrUnexpectedEOF)
	vars["ErrNoProgress"] = reflect.ValueOf(&io.ErrNoProgress)
	vars["ErrClosedPipe"] = reflect.ValueOf(&io.ErrClosedPipe)
	pkgs["io"] = &eval.SimpleEnv {
		Consts: consts,
		Funcs:  funcs,
		Types:  types,
		Vars:   vars,
		Pkgs:   pkgs,
	}
	consts = make(map[string] reflect.Value)
	consts["Compiler"] = reflect.ValueOf(runtime.Compiler)
	consts["GOOS"] = reflect.ValueOf(runtime.GOOS)
	consts["GOARCH"] = reflect.ValueOf(runtime.GOARCH)

	funcs = make(map[string] reflect.Value)
	funcs["SetCPUProfileRate"] = reflect.ValueOf(runtime.SetCPUProfileRate)
	funcs["CPUProfile"] = reflect.ValueOf(runtime.CPUProfile)
	funcs["Breakpoint"] = reflect.ValueOf(runtime.Breakpoint)
	funcs["LockOSThread"] = reflect.ValueOf(runtime.LockOSThread)
	funcs["UnlockOSThread"] = reflect.ValueOf(runtime.UnlockOSThread)
	funcs["GOMAXPROCS"] = reflect.ValueOf(runtime.GOMAXPROCS)
	funcs["NumCPU"] = reflect.ValueOf(runtime.NumCPU)
	funcs["NumCgoCall"] = reflect.ValueOf(runtime.NumCgoCall)
	funcs["NumGoroutine"] = reflect.ValueOf(runtime.NumGoroutine)
	funcs["Caller"] = reflect.ValueOf(runtime.Caller)
	funcs["Callers"] = reflect.ValueOf(runtime.Callers)
	funcs["GOROOT"] = reflect.ValueOf(runtime.GOROOT)
	funcs["Version"] = reflect.ValueOf(runtime.Version)
	funcs["GC"] = reflect.ValueOf(runtime.GC)
	funcs["SetFinalizer"] = reflect.ValueOf(runtime.SetFinalizer)
	funcs["ReadMemStats"] = reflect.ValueOf(runtime.ReadMemStats)
	funcs["SetBlockProfileRate"] = reflect.ValueOf(runtime.SetBlockProfileRate)
	funcs["MemProfile"] = reflect.ValueOf(runtime.MemProfile)
	funcs["BlockProfile"] = reflect.ValueOf(runtime.BlockProfile)
	funcs["ThreadCreateProfile"] = reflect.ValueOf(runtime.ThreadCreateProfile)
	funcs["GoroutineProfile"] = reflect.ValueOf(runtime.GoroutineProfile)
	funcs["Stack"] = reflect.ValueOf(runtime.Stack)
	funcs["Goexit"] = reflect.ValueOf(runtime.Goexit)
	funcs["Gosched"] = reflect.ValueOf(runtime.Gosched)
	funcs["FuncForPC"] = reflect.ValueOf(runtime.FuncForPC)

	types = make(map[string] reflect.Type)
	types["Error"] = reflect.TypeOf(new(runtime.Error)).Elem()
	types["TypeAssertionError"] = reflect.TypeOf(new(runtime.TypeAssertionError)).Elem()
	types["MemStats"] = reflect.TypeOf(new(runtime.MemStats)).Elem()
	types["StackRecord"] = reflect.TypeOf(new(runtime.StackRecord)).Elem()
	types["MemProfileRecord"] = reflect.TypeOf(new(runtime.MemProfileRecord)).Elem()
	types["BlockProfileRecord"] = reflect.TypeOf(new(runtime.BlockProfileRecord)).Elem()
	types["Func"] = reflect.TypeOf(new(runtime.Func)).Elem()

	vars = make(map[string] reflect.Value)
	vars["MemProfileRate"] = reflect.ValueOf(&runtime.MemProfileRate)
	pkgs["runtime"] = &eval.SimpleEnv {
		Consts: consts,
		Funcs:  funcs,
		Types:  types,
		Vars:   vars,
		Pkgs:   pkgs,
	}
	consts = make(map[string] reflect.Value)

	funcs = make(map[string] reflect.Value)
	funcs["NewReader"] = reflect.ValueOf(strings.NewReader)
	funcs["NewReplacer"] = reflect.ValueOf(strings.NewReplacer)
	funcs["Count"] = reflect.ValueOf(strings.Count)
	funcs["Contains"] = reflect.ValueOf(strings.Contains)
	funcs["ContainsAny"] = reflect.ValueOf(strings.ContainsAny)
	funcs["ContainsRune"] = reflect.ValueOf(strings.ContainsRune)
	funcs["Index"] = reflect.ValueOf(strings.Index)
	funcs["LastIndex"] = reflect.ValueOf(strings.LastIndex)
	funcs["IndexRune"] = reflect.ValueOf(strings.IndexRune)
	funcs["IndexAny"] = reflect.ValueOf(strings.IndexAny)
	funcs["LastIndexAny"] = reflect.ValueOf(strings.LastIndexAny)
	funcs["SplitN"] = reflect.ValueOf(strings.SplitN)
	funcs["SplitAfterN"] = reflect.ValueOf(strings.SplitAfterN)
	funcs["Split"] = reflect.ValueOf(strings.Split)
	funcs["SplitAfter"] = reflect.ValueOf(strings.SplitAfter)
	funcs["Fields"] = reflect.ValueOf(strings.Fields)
	funcs["FieldsFunc"] = reflect.ValueOf(strings.FieldsFunc)
	funcs["Join"] = reflect.ValueOf(strings.Join)
	funcs["HasPrefix"] = reflect.ValueOf(strings.HasPrefix)
	funcs["HasSuffix"] = reflect.ValueOf(strings.HasSuffix)
	funcs["Map"] = reflect.ValueOf(strings.Map)
	funcs["Repeat"] = reflect.ValueOf(strings.Repeat)
	funcs["ToUpper"] = reflect.ValueOf(strings.ToUpper)
	funcs["ToLower"] = reflect.ValueOf(strings.ToLower)
	funcs["ToTitle"] = reflect.ValueOf(strings.ToTitle)
	funcs["ToUpperSpecial"] = reflect.ValueOf(strings.ToUpperSpecial)
	funcs["ToLowerSpecial"] = reflect.ValueOf(strings.ToLowerSpecial)
	funcs["ToTitleSpecial"] = reflect.ValueOf(strings.ToTitleSpecial)
	funcs["Title"] = reflect.ValueOf(strings.Title)
	funcs["TrimLeftFunc"] = reflect.ValueOf(strings.TrimLeftFunc)
	funcs["TrimRightFunc"] = reflect.ValueOf(strings.TrimRightFunc)
	funcs["TrimFunc"] = reflect.ValueOf(strings.TrimFunc)
	funcs["IndexFunc"] = reflect.ValueOf(strings.IndexFunc)
	funcs["LastIndexFunc"] = reflect.ValueOf(strings.LastIndexFunc)
	funcs["Trim"] = reflect.ValueOf(strings.Trim)
	funcs["TrimLeft"] = reflect.ValueOf(strings.TrimLeft)
	funcs["TrimRight"] = reflect.ValueOf(strings.TrimRight)
	funcs["TrimSpace"] = reflect.ValueOf(strings.TrimSpace)
	funcs["TrimPrefix"] = reflect.ValueOf(strings.TrimPrefix)
	funcs["TrimSuffix"] = reflect.ValueOf(strings.TrimSuffix)
	funcs["Replace"] = reflect.ValueOf(strings.Replace)
	funcs["EqualFold"] = reflect.ValueOf(strings.EqualFold)
	funcs["IndexByte"] = reflect.ValueOf(strings.IndexByte)

	types = make(map[string] reflect.Type)
	types["Reader"] = reflect.TypeOf(new(strings.Reader)).Elem()
	types["Replacer"] = reflect.TypeOf(new(strings.Replacer)).Elem()

	vars = make(map[string] reflect.Value)
	pkgs["strings"] = &eval.SimpleEnv {
		Consts: consts,
		Funcs:  funcs,
		Types:  types,
		Vars:   vars,
		Pkgs:   pkgs,
	}
	consts = make(map[string] reflect.Value)

	funcs = make(map[string] reflect.Value)
	funcs["NewCond"] = reflect.ValueOf(sync.NewCond)

	types = make(map[string] reflect.Type)
	types["Cond"] = reflect.TypeOf(new(sync.Cond)).Elem()
	types["Mutex"] = reflect.TypeOf(new(sync.Mutex)).Elem()
	types["Locker"] = reflect.TypeOf(new(sync.Locker)).Elem()
	types["Once"] = reflect.TypeOf(new(sync.Once)).Elem()
	types["Pool"] = reflect.TypeOf(new(sync.Pool)).Elem()
	types["RWMutex"] = reflect.TypeOf(new(sync.RWMutex)).Elem()
	types["WaitGroup"] = reflect.TypeOf(new(sync.WaitGroup)).Elem()

	vars = make(map[string] reflect.Value)
	pkgs["sync"] = &eval.SimpleEnv {
		Consts: consts,
		Funcs:  funcs,
		Types:  types,
		Vars:   vars,
		Pkgs:   pkgs,
	}
	consts = make(map[string] reflect.Value)

	funcs = make(map[string] reflect.Value)
	funcs["SwapInt32"] = reflect.ValueOf(atomic.SwapInt32)
	funcs["SwapInt64"] = reflect.ValueOf(atomic.SwapInt64)
	funcs["SwapUint32"] = reflect.ValueOf(atomic.SwapUint32)
	funcs["SwapUint64"] = reflect.ValueOf(atomic.SwapUint64)
	funcs["SwapUintptr"] = reflect.ValueOf(atomic.SwapUintptr)
	funcs["SwapPointer"] = reflect.ValueOf(atomic.SwapPointer)
	funcs["CompareAndSwapInt32"] = reflect.ValueOf(atomic.CompareAndSwapInt32)
	funcs["CompareAndSwapInt64"] = reflect.ValueOf(atomic.CompareAndSwapInt64)
	funcs["CompareAndSwapUint32"] = reflect.ValueOf(atomic.CompareAndSwapUint32)
	funcs["CompareAndSwapUint64"] = reflect.ValueOf(atomic.CompareAndSwapUint64)
	funcs["CompareAndSwapUintptr"] = reflect.ValueOf(atomic.CompareAndSwapUintptr)
	funcs["CompareAndSwapPointer"] = reflect.ValueOf(atomic.CompareAndSwapPointer)
	funcs["AddInt32"] = reflect.ValueOf(atomic.AddInt32)
	funcs["AddUint32"] = reflect.ValueOf(atomic.AddUint32)
	funcs["AddInt64"] = reflect.ValueOf(atomic.AddInt64)
	funcs["AddUint64"] = reflect.ValueOf(atomic.AddUint64)
	funcs["AddUintptr"] = reflect.ValueOf(atomic.AddUintptr)
	funcs["LoadInt32"] = reflect.ValueOf(atomic.LoadInt32)
	funcs["LoadInt64"] = reflect.ValueOf(atomic.LoadInt64)
	funcs["LoadUint32"] = reflect.ValueOf(atomic.LoadUint32)
	funcs["LoadUint64"] = reflect.ValueOf(atomic.LoadUint64)
	funcs["LoadUintptr"] = reflect.ValueOf(atomic.LoadUintptr)
	funcs["LoadPointer"] = reflect.ValueOf(atomic.LoadPointer)
	funcs["StoreInt32"] = reflect.ValueOf(atomic.StoreInt32)
	funcs["StoreInt64"] = reflect.ValueOf(atomic.StoreInt64)
	funcs["StoreUint32"] = reflect.ValueOf(atomic.StoreUint32)
	funcs["StoreUint64"] = reflect.ValueOf(atomic.StoreUint64)
	funcs["StoreUintptr"] = reflect.ValueOf(atomic.StoreUintptr)
	funcs["StorePointer"] = reflect.ValueOf(atomic.StorePointer)

	types = make(map[string] reflect.Type)
	types["Value"] = reflect.TypeOf(new(atomic.Value)).Elem()

	vars = make(map[string] reflect.Value)
	pkgs["atomic"] = &eval.SimpleEnv {
		Consts: consts,
		Funcs:  funcs,
		Types:  types,
		Vars:   vars,
		Pkgs:   pkgs,
	}
	consts = make(map[string] reflect.Value)
	consts["MaxRune"] = reflect.ValueOf(unicode.MaxRune)
	consts["ReplacementChar"] = reflect.ValueOf(unicode.ReplacementChar)
	consts["MaxASCII"] = reflect.ValueOf(unicode.MaxASCII)
	consts["MaxLatin1"] = reflect.ValueOf(unicode.MaxLatin1)
	consts["UpperCase"] = reflect.ValueOf(unicode.UpperCase)
	consts["LowerCase"] = reflect.ValueOf(unicode.LowerCase)
	consts["TitleCase"] = reflect.ValueOf(unicode.TitleCase)
	consts["MaxCase"] = reflect.ValueOf(unicode.MaxCase)
	consts["UpperLower"] = reflect.ValueOf(unicode.UpperLower)
	consts["Version"] = reflect.ValueOf(unicode.Version)

	funcs = make(map[string] reflect.Value)
	funcs["IsDigit"] = reflect.ValueOf(unicode.IsDigit)
	funcs["IsGraphic"] = reflect.ValueOf(unicode.IsGraphic)
	funcs["IsPrint"] = reflect.ValueOf(unicode.IsPrint)
	funcs["IsOneOf"] = reflect.ValueOf(unicode.IsOneOf)
	funcs["In"] = reflect.ValueOf(unicode.In)
	funcs["IsControl"] = reflect.ValueOf(unicode.IsControl)
	funcs["IsLetter"] = reflect.ValueOf(unicode.IsLetter)
	funcs["IsMark"] = reflect.ValueOf(unicode.IsMark)
	funcs["IsNumber"] = reflect.ValueOf(unicode.IsNumber)
	funcs["IsPunct"] = reflect.ValueOf(unicode.IsPunct)
	funcs["IsSpace"] = reflect.ValueOf(unicode.IsSpace)
	funcs["IsSymbol"] = reflect.ValueOf(unicode.IsSymbol)
	funcs["Is"] = reflect.ValueOf(unicode.Is)
	funcs["IsUpper"] = reflect.ValueOf(unicode.IsUpper)
	funcs["IsLower"] = reflect.ValueOf(unicode.IsLower)
	funcs["IsTitle"] = reflect.ValueOf(unicode.IsTitle)
	funcs["To"] = reflect.ValueOf(unicode.To)
	funcs["ToUpper"] = reflect.ValueOf(unicode.ToUpper)
	funcs["ToLower"] = reflect.ValueOf(unicode.ToLower)
	funcs["ToTitle"] = reflect.ValueOf(unicode.ToTitle)
	funcs["SimpleFold"] = reflect.ValueOf(unicode.SimpleFold)

	types = make(map[string] reflect.Type)
	types["RangeTable"] = reflect.TypeOf(new(unicode.RangeTable)).Elem()
	types["Range16"] = reflect.TypeOf(new(unicode.Range16)).Elem()
	types["Range32"] = reflect.TypeOf(new(unicode.Range32)).Elem()
	types["CaseRange"] = reflect.TypeOf(new(unicode.CaseRange)).Elem()
	types["SpecialCase"] = reflect.TypeOf(new(unicode.SpecialCase)).Elem()

	vars = make(map[string] reflect.Value)
	vars["TurkishCase"] = reflect.ValueOf(&unicode.TurkishCase)
	vars["AzeriCase"] = reflect.ValueOf(&unicode.AzeriCase)
	vars["GraphicRanges"] = reflect.ValueOf(&unicode.GraphicRanges)
	vars["PrintRanges"] = reflect.ValueOf(&unicode.PrintRanges)
	vars["Categories"] = reflect.ValueOf(&unicode.Categories)
	vars["Cc"] = reflect.ValueOf(&unicode.Cc)
	vars["Cf"] = reflect.ValueOf(&unicode.Cf)
	vars["Co"] = reflect.ValueOf(&unicode.Co)
	vars["Cs"] = reflect.ValueOf(&unicode.Cs)
	vars["Digit"] = reflect.ValueOf(&unicode.Digit)
	vars["Nd"] = reflect.ValueOf(&unicode.Nd)
	vars["Letter"] = reflect.ValueOf(&unicode.Letter)
	vars["L"] = reflect.ValueOf(&unicode.L)
	vars["Lm"] = reflect.ValueOf(&unicode.Lm)
	vars["Lo"] = reflect.ValueOf(&unicode.Lo)
	vars["Lower"] = reflect.ValueOf(&unicode.Lower)
	vars["Ll"] = reflect.ValueOf(&unicode.Ll)
	vars["Mark"] = reflect.ValueOf(&unicode.Mark)
	vars["M"] = reflect.ValueOf(&unicode.M)
	vars["Mc"] = reflect.ValueOf(&unicode.Mc)
	vars["Me"] = reflect.ValueOf(&unicode.Me)
	vars["Mn"] = reflect.ValueOf(&unicode.Mn)
	vars["Nl"] = reflect.ValueOf(&unicode.Nl)
	vars["No"] = reflect.ValueOf(&unicode.No)
	vars["Number"] = reflect.ValueOf(&unicode.Number)
	vars["N"] = reflect.ValueOf(&unicode.N)
	vars["Other"] = reflect.ValueOf(&unicode.Other)
	vars["C"] = reflect.ValueOf(&unicode.C)
	vars["Pc"] = reflect.ValueOf(&unicode.Pc)
	vars["Pd"] = reflect.ValueOf(&unicode.Pd)
	vars["Pe"] = reflect.ValueOf(&unicode.Pe)
	vars["Pf"] = reflect.ValueOf(&unicode.Pf)
	vars["Pi"] = reflect.ValueOf(&unicode.Pi)
	vars["Po"] = reflect.ValueOf(&unicode.Po)
	vars["Ps"] = reflect.ValueOf(&unicode.Ps)
	vars["Punct"] = reflect.ValueOf(&unicode.Punct)
	vars["P"] = reflect.ValueOf(&unicode.P)
	vars["Sc"] = reflect.ValueOf(&unicode.Sc)
	vars["Sk"] = reflect.ValueOf(&unicode.Sk)
	vars["Sm"] = reflect.ValueOf(&unicode.Sm)
	vars["So"] = reflect.ValueOf(&unicode.So)
	vars["Space"] = reflect.ValueOf(&unicode.Space)
	vars["Z"] = reflect.ValueOf(&unicode.Z)
	vars["Symbol"] = reflect.ValueOf(&unicode.Symbol)
	vars["S"] = reflect.ValueOf(&unicode.S)
	vars["Title"] = reflect.ValueOf(&unicode.Title)
	vars["Lt"] = reflect.ValueOf(&unicode.Lt)
	vars["Upper"] = reflect.ValueOf(&unicode.Upper)
	vars["Lu"] = reflect.ValueOf(&unicode.Lu)
	vars["Zl"] = reflect.ValueOf(&unicode.Zl)
	vars["Zp"] = reflect.ValueOf(&unicode.Zp)
	vars["Zs"] = reflect.ValueOf(&unicode.Zs)
	vars["Scripts"] = reflect.ValueOf(&unicode.Scripts)
	vars["Arabic"] = reflect.ValueOf(&unicode.Arabic)
	vars["Armenian"] = reflect.ValueOf(&unicode.Armenian)
	vars["Avestan"] = reflect.ValueOf(&unicode.Avestan)
	vars["Balinese"] = reflect.ValueOf(&unicode.Balinese)
	vars["Bamum"] = reflect.ValueOf(&unicode.Bamum)
	vars["Bassa_Vah"] = reflect.ValueOf(&unicode.Bassa_Vah)
	vars["Batak"] = reflect.ValueOf(&unicode.Batak)
	vars["Bengali"] = reflect.ValueOf(&unicode.Bengali)
	vars["Bopomofo"] = reflect.ValueOf(&unicode.Bopomofo)
	vars["Brahmi"] = reflect.ValueOf(&unicode.Brahmi)
	vars["Braille"] = reflect.ValueOf(&unicode.Braille)
	vars["Buginese"] = reflect.ValueOf(&unicode.Buginese)
	vars["Buhid"] = reflect.ValueOf(&unicode.Buhid)
	vars["Canadian_Aboriginal"] = reflect.ValueOf(&unicode.Canadian_Aboriginal)
	vars["Carian"] = reflect.ValueOf(&unicode.Carian)
	vars["Caucasian_Albanian"] = reflect.ValueOf(&unicode.Caucasian_Albanian)
	vars["Chakma"] = reflect.ValueOf(&unicode.Chakma)
	vars["Cham"] = reflect.ValueOf(&unicode.Cham)
	vars["Cherokee"] = reflect.ValueOf(&unicode.Cherokee)
	vars["Common"] = reflect.ValueOf(&unicode.Common)
	vars["Coptic"] = reflect.ValueOf(&unicode.Coptic)
	vars["Cuneiform"] = reflect.ValueOf(&unicode.Cuneiform)
	vars["Cypriot"] = reflect.ValueOf(&unicode.Cypriot)
	vars["Cyrillic"] = reflect.ValueOf(&unicode.Cyrillic)
	vars["Deseret"] = reflect.ValueOf(&unicode.Deseret)
	vars["Devanagari"] = reflect.ValueOf(&unicode.Devanagari)
	vars["Duployan"] = reflect.ValueOf(&unicode.Duployan)
	vars["Egyptian_Hieroglyphs"] = reflect.ValueOf(&unicode.Egyptian_Hieroglyphs)
	vars["Elbasan"] = reflect.ValueOf(&unicode.Elbasan)
	vars["Ethiopic"] = reflect.ValueOf(&unicode.Ethiopic)
	vars["Georgian"] = reflect.ValueOf(&unicode.Georgian)
	vars["Glagolitic"] = reflect.ValueOf(&unicode.Glagolitic)
	vars["Gothic"] = reflect.ValueOf(&unicode.Gothic)
	vars["Grantha"] = reflect.ValueOf(&unicode.Grantha)
	vars["Greek"] = reflect.ValueOf(&unicode.Greek)
	vars["Gujarati"] = reflect.ValueOf(&unicode.Gujarati)
	vars["Gurmukhi"] = reflect.ValueOf(&unicode.Gurmukhi)
	vars["Han"] = reflect.ValueOf(&unicode.Han)
	vars["Hangul"] = reflect.ValueOf(&unicode.Hangul)
	vars["Hanunoo"] = reflect.ValueOf(&unicode.Hanunoo)
	vars["Hebrew"] = reflect.ValueOf(&unicode.Hebrew)
	vars["Hiragana"] = reflect.ValueOf(&unicode.Hiragana)
	vars["Imperial_Aramaic"] = reflect.ValueOf(&unicode.Imperial_Aramaic)
	vars["Inherited"] = reflect.ValueOf(&unicode.Inherited)
	vars["Inscriptional_Pahlavi"] = reflect.ValueOf(&unicode.Inscriptional_Pahlavi)
	vars["Inscriptional_Parthian"] = reflect.ValueOf(&unicode.Inscriptional_Parthian)
	vars["Javanese"] = reflect.ValueOf(&unicode.Javanese)
	vars["Kaithi"] = reflect.ValueOf(&unicode.Kaithi)
	vars["Kannada"] = reflect.ValueOf(&unicode.Kannada)
	vars["Katakana"] = reflect.ValueOf(&unicode.Katakana)
	vars["Kayah_Li"] = reflect.ValueOf(&unicode.Kayah_Li)
	vars["Kharoshthi"] = reflect.ValueOf(&unicode.Kharoshthi)
	vars["Khmer"] = reflect.ValueOf(&unicode.Khmer)
	vars["Khojki"] = reflect.ValueOf(&unicode.Khojki)
	vars["Khudawadi"] = reflect.ValueOf(&unicode.Khudawadi)
	vars["Lao"] = reflect.ValueOf(&unicode.Lao)
	vars["Latin"] = reflect.ValueOf(&unicode.Latin)
	vars["Lepcha"] = reflect.ValueOf(&unicode.Lepcha)
	vars["Limbu"] = reflect.ValueOf(&unicode.Limbu)
	vars["Linear_A"] = reflect.ValueOf(&unicode.Linear_A)
	vars["Linear_B"] = reflect.ValueOf(&unicode.Linear_B)
	vars["Lisu"] = reflect.ValueOf(&unicode.Lisu)
	vars["Lycian"] = reflect.ValueOf(&unicode.Lycian)
	vars["Lydian"] = reflect.ValueOf(&unicode.Lydian)
	vars["Mahajani"] = reflect.ValueOf(&unicode.Mahajani)
	vars["Malayalam"] = reflect.ValueOf(&unicode.Malayalam)
	vars["Mandaic"] = reflect.ValueOf(&unicode.Mandaic)
	vars["Manichaean"] = reflect.ValueOf(&unicode.Manichaean)
	vars["Meetei_Mayek"] = reflect.ValueOf(&unicode.Meetei_Mayek)
	vars["Mende_Kikakui"] = reflect.ValueOf(&unicode.Mende_Kikakui)
	vars["Meroitic_Cursive"] = reflect.ValueOf(&unicode.Meroitic_Cursive)
	vars["Meroitic_Hieroglyphs"] = reflect.ValueOf(&unicode.Meroitic_Hieroglyphs)
	vars["Miao"] = reflect.ValueOf(&unicode.Miao)
	vars["Modi"] = reflect.ValueOf(&unicode.Modi)
	vars["Mongolian"] = reflect.ValueOf(&unicode.Mongolian)
	vars["Mro"] = reflect.ValueOf(&unicode.Mro)
	vars["Myanmar"] = reflect.ValueOf(&unicode.Myanmar)
	vars["Nabataean"] = reflect.ValueOf(&unicode.Nabataean)
	vars["New_Tai_Lue"] = reflect.ValueOf(&unicode.New_Tai_Lue)
	vars["Nko"] = reflect.ValueOf(&unicode.Nko)
	vars["Ogham"] = reflect.ValueOf(&unicode.Ogham)
	vars["Ol_Chiki"] = reflect.ValueOf(&unicode.Ol_Chiki)
	vars["Old_Italic"] = reflect.ValueOf(&unicode.Old_Italic)
	vars["Old_North_Arabian"] = reflect.ValueOf(&unicode.Old_North_Arabian)
	vars["Old_Permic"] = reflect.ValueOf(&unicode.Old_Permic)
	vars["Old_Persian"] = reflect.ValueOf(&unicode.Old_Persian)
	vars["Old_South_Arabian"] = reflect.ValueOf(&unicode.Old_South_Arabian)
	vars["Old_Turkic"] = reflect.ValueOf(&unicode.Old_Turkic)
	vars["Oriya"] = reflect.ValueOf(&unicode.Oriya)
	vars["Osmanya"] = reflect.ValueOf(&unicode.Osmanya)
	vars["Pahawh_Hmong"] = reflect.ValueOf(&unicode.Pahawh_Hmong)
	vars["Palmyrene"] = reflect.ValueOf(&unicode.Palmyrene)
	vars["Pau_Cin_Hau"] = reflect.ValueOf(&unicode.Pau_Cin_Hau)
	vars["Phags_Pa"] = reflect.ValueOf(&unicode.Phags_Pa)
	vars["Phoenician"] = reflect.ValueOf(&unicode.Phoenician)
	vars["Psalter_Pahlavi"] = reflect.ValueOf(&unicode.Psalter_Pahlavi)
	vars["Rejang"] = reflect.ValueOf(&unicode.Rejang)
	vars["Runic"] = reflect.ValueOf(&unicode.Runic)
	vars["Samaritan"] = reflect.ValueOf(&unicode.Samaritan)
	vars["Saurashtra"] = reflect.ValueOf(&unicode.Saurashtra)
	vars["Sharada"] = reflect.ValueOf(&unicode.Sharada)
	vars["Shavian"] = reflect.ValueOf(&unicode.Shavian)
	vars["Siddham"] = reflect.ValueOf(&unicode.Siddham)
	vars["Sinhala"] = reflect.ValueOf(&unicode.Sinhala)
	vars["Sora_Sompeng"] = reflect.ValueOf(&unicode.Sora_Sompeng)
	vars["Sundanese"] = reflect.ValueOf(&unicode.Sundanese)
	vars["Syloti_Nagri"] = reflect.ValueOf(&unicode.Syloti_Nagri)
	vars["Syriac"] = reflect.ValueOf(&unicode.Syriac)
	vars["Tagalog"] = reflect.ValueOf(&unicode.Tagalog)
	vars["Tagbanwa"] = reflect.ValueOf(&unicode.Tagbanwa)
	vars["Tai_Le"] = reflect.ValueOf(&unicode.Tai_Le)
	vars["Tai_Tham"] = reflect.ValueOf(&unicode.Tai_Tham)
	vars["Tai_Viet"] = reflect.ValueOf(&unicode.Tai_Viet)
	vars["Takri"] = reflect.ValueOf(&unicode.Takri)
	vars["Tamil"] = reflect.ValueOf(&unicode.Tamil)
	vars["Telugu"] = reflect.ValueOf(&unicode.Telugu)
	vars["Thaana"] = reflect.ValueOf(&unicode.Thaana)
	vars["Thai"] = reflect.ValueOf(&unicode.Thai)
	vars["Tibetan"] = reflect.ValueOf(&unicode.Tibetan)
	vars["Tifinagh"] = reflect.ValueOf(&unicode.Tifinagh)
	vars["Tirhuta"] = reflect.ValueOf(&unicode.Tirhuta)
	vars["Ugaritic"] = reflect.ValueOf(&unicode.Ugaritic)
	vars["Vai"] = reflect.ValueOf(&unicode.Vai)
	vars["Warang_Citi"] = reflect.ValueOf(&unicode.Warang_Citi)
	vars["Yi"] = reflect.ValueOf(&unicode.Yi)
	vars["Properties"] = reflect.ValueOf(&unicode.Properties)
	vars["ASCII_Hex_Digit"] = reflect.ValueOf(&unicode.ASCII_Hex_Digit)
	vars["Bidi_Control"] = reflect.ValueOf(&unicode.Bidi_Control)
	vars["Dash"] = reflect.ValueOf(&unicode.Dash)
	vars["Deprecated"] = reflect.ValueOf(&unicode.Deprecated)
	vars["Diacritic"] = reflect.ValueOf(&unicode.Diacritic)
	vars["Extender"] = reflect.ValueOf(&unicode.Extender)
	vars["Hex_Digit"] = reflect.ValueOf(&unicode.Hex_Digit)
	vars["Hyphen"] = reflect.ValueOf(&unicode.Hyphen)
	vars["IDS_Binary_Operator"] = reflect.ValueOf(&unicode.IDS_Binary_Operator)
	vars["IDS_Trinary_Operator"] = reflect.ValueOf(&unicode.IDS_Trinary_Operator)
	vars["Ideographic"] = reflect.ValueOf(&unicode.Ideographic)
	vars["Join_Control"] = reflect.ValueOf(&unicode.Join_Control)
	vars["Logical_Order_Exception"] = reflect.ValueOf(&unicode.Logical_Order_Exception)
	vars["Noncharacter_Code_Point"] = reflect.ValueOf(&unicode.Noncharacter_Code_Point)
	vars["Other_Alphabetic"] = reflect.ValueOf(&unicode.Other_Alphabetic)
	vars["Other_Default_Ignorable_Code_Point"] = reflect.ValueOf(&unicode.Other_Default_Ignorable_Code_Point)
	vars["Other_Grapheme_Extend"] = reflect.ValueOf(&unicode.Other_Grapheme_Extend)
	vars["Other_ID_Continue"] = reflect.ValueOf(&unicode.Other_ID_Continue)
	vars["Other_ID_Start"] = reflect.ValueOf(&unicode.Other_ID_Start)
	vars["Other_Lowercase"] = reflect.ValueOf(&unicode.Other_Lowercase)
	vars["Other_Math"] = reflect.ValueOf(&unicode.Other_Math)
	vars["Other_Uppercase"] = reflect.ValueOf(&unicode.Other_Uppercase)
	vars["Pattern_Syntax"] = reflect.ValueOf(&unicode.Pattern_Syntax)
	vars["Pattern_White_Space"] = reflect.ValueOf(&unicode.Pattern_White_Space)
	vars["Quotation_Mark"] = reflect.ValueOf(&unicode.Quotation_Mark)
	vars["Radical"] = reflect.ValueOf(&unicode.Radical)
	vars["STerm"] = reflect.ValueOf(&unicode.STerm)
	vars["Soft_Dotted"] = reflect.ValueOf(&unicode.Soft_Dotted)
	vars["Terminal_Punctuation"] = reflect.ValueOf(&unicode.Terminal_Punctuation)
	vars["Unified_Ideograph"] = reflect.ValueOf(&unicode.Unified_Ideograph)
	vars["Variation_Selector"] = reflect.ValueOf(&unicode.Variation_Selector)
	vars["White_Space"] = reflect.ValueOf(&unicode.White_Space)
	vars["CaseRanges"] = reflect.ValueOf(&unicode.CaseRanges)
	vars["FoldCategory"] = reflect.ValueOf(&unicode.FoldCategory)
	vars["FoldScript"] = reflect.ValueOf(&unicode.FoldScript)
	pkgs["unicode"] = &eval.SimpleEnv {
		Consts: consts,
		Funcs:  funcs,
		Types:  types,
		Vars:   vars,
		Pkgs:   pkgs,
	}
	consts = make(map[string] reflect.Value)
	consts["RuneError"] = reflect.ValueOf(utf8.RuneError)
	consts["RuneSelf"] = reflect.ValueOf(utf8.RuneSelf)
	consts["MaxRune"] = reflect.ValueOf(utf8.MaxRune)
	consts["UTFMax"] = reflect.ValueOf(utf8.UTFMax)

	funcs = make(map[string] reflect.Value)
	funcs["FullRune"] = reflect.ValueOf(utf8.FullRune)
	funcs["FullRuneInString"] = reflect.ValueOf(utf8.FullRuneInString)
	funcs["DecodeRune"] = reflect.ValueOf(utf8.DecodeRune)
	funcs["DecodeRuneInString"] = reflect.ValueOf(utf8.DecodeRuneInString)
	funcs["DecodeLastRune"] = reflect.ValueOf(utf8.DecodeLastRune)
	funcs["DecodeLastRuneInString"] = reflect.ValueOf(utf8.DecodeLastRuneInString)
	funcs["RuneLen"] = reflect.ValueOf(utf8.RuneLen)
	funcs["EncodeRune"] = reflect.ValueOf(utf8.EncodeRune)
	funcs["RuneCount"] = reflect.ValueOf(utf8.RuneCount)
	funcs["RuneCountInString"] = reflect.ValueOf(utf8.RuneCountInString)
	funcs["RuneStart"] = reflect.ValueOf(utf8.RuneStart)
	funcs["Valid"] = reflect.ValueOf(utf8.Valid)
	funcs["ValidString"] = reflect.ValueOf(utf8.ValidString)
	funcs["ValidRune"] = reflect.ValueOf(utf8.ValidRune)

	types = make(map[string] reflect.Type)

	vars = make(map[string] reflect.Value)
	pkgs["utf8"] = &eval.SimpleEnv {
		Consts: consts,
		Funcs:  funcs,
		Types:  types,
		Vars:   vars,
		Pkgs:   pkgs,
	}

	mainEnv := eval.MakeSimpleEnv()
	mainEnv.Pkgs = pkgs
	return mainEnv
}